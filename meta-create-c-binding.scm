(use-modules (ice-9 textual-ports))
(use-modules (ice-9 format))

(define functions-file (car (cdr (command-line))))

(define (read-lines port lines)
  (let ((line (get-line port)))
    (if (eof-object? line)
        lines
        (read-lines port (cons line lines)))))

(define (read-specifications path)
  (format #t "//Reading the functions definitions from: ~a\n\n" path)
  (let* ((port (open-input-file path))
         (results (read-lines port '())))
    (close-port port)
    (reverse results)))

;;;  This is what I would expect the generator to do, but without the string concatenation:
;;;
;;;  static SCM Py_Initialize_wrapper(SCM unused)
;;;  {
;;;    WITH_PYTHON_LOCK(Py_Initialize());
;;;    return SCM_UNSPECIFIED;
;;;  }
;;;
;;;  static SCM Py_Finalize_wrapper(SCM unused)
;;;  {
;;;    WITH_PYTHON_LOCK(Py_Finalize())
;;;    return SCM_UNSPECIFIED;
;;;  }

(define header
  (list
   "/*"
   " * This code was automatically generated by meta-create-c-binding.scm."
   " * Do not edit directly"
   " */"
   ""))

(define (generate-function name)
  (format #f "// ~a
static SCM ~a_wrapper(SCM unused)
  {
    WITH_PYTHON_LOCK(~a());
    return SCM_UNSPECIFIED;
  }\n\n" name name name))

(define (write-lines lines)
  (map (lambda (x)
         (display (string-append x "\n")))
       lines))

(write-lines header)
(map (lambda (function-text)
       (display function-text))
     (map (lambda (name)
            (generate-function name))
          (read-specifications functions-file)))
