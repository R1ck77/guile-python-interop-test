(use-modules (ice-9 textual-ports))
(use-modules (ice-9 format))
(use-modules (srfi srfi-1))

(define functions-file (car (cdr (command-line))))

(define (read-lines port lines)
  (let ((line (get-line port)))
    (if (eof-object? line)
        lines
        (read-lines port (cons line lines)))))

(define (read-specifications path)
  (format #t "//Reading the functions definitions from: ~a\n\n" path)
  (let* ((port (open-input-file path))
         (results (read-lines port '())))
    (close-port port)
    (reverse results)))

;;;  This is what I would expect the generator to do, but without the string concatenation:
;;;
;;;  static SCM Py_Initialize_wrapper(SCM unused)
;;;  {
;;;    WITH_PYTHON_LOCK(Py_Initialize());
;;;    return SCM_UNSPECIFIED;
;;;  }
;;;
;;;  static SCM PyDict_New_wrapper()
;;;  {
;;;    PyObject *result;
;;;    WITH_PYTHON_LOCK(py_dict = PyDict_New());
;;;  
;;;    if(result == NULL) {
;;;      return create_empty_list();
;;;    } else {
;;;      return create_python_scm(result, "PyObject");
;;;    }
;;;  }

(define header
  (list
   "/*\n"
   " * This code was automatically generated by meta-create-c-binding.scm.\n"
   " * Do not edit directly\n"
   " */\n"
   "\n"))

(define (write-lines lines)
  (map display
       lines))

(define generate-function-lines)

;;; TODO/FIXME list-refs should be assigned in the blocks, or better each block should be a function
(define (expand-pseudo-instruction pseudocode)
  (let ((type (car pseudocode))
        (arguments (cdr pseudocode)))
    (let ((result (cond
            ((eqv? type ':comment)
             (list (car arguments)))
            ((eqv? type ':header)
             (list (format #f "SCM ~a()\n" (list-ref arguments 1))))
            ((eqv? type ':sub-execute)
             (list (format #f "WITH_PYTHON_LOCK(~a());\n" (car arguments))))
            ((eqv? type ':function-execute)
             (list
              (format #f "~a ~a;\n"
                      (car arguments)
                      (list-ref arguments 2))
              (format #f "WITH_PYTHON_LOCK(~a = ~a());\n\n"
                      (list-ref arguments 2)
                      (cadr arguments))))
            ((eqv? type ':to-py-object)
             (list
              (format #f "SCM ~a;\n"
                      (cadr arguments))
              (format #f "if(~a == NULL) {\n"
                      (car arguments))
              (format #f "    ~a = create_empty_list();\n"
                      (cadr arguments))
              "} else {\n"
              (format #f "    ~a = create_python_scm(~a, \"PyObject\");\n"
                      (cadr arguments)
                      (car arguments))
              "}\n"              
              ))
            ((eqv? type ':return)
             (list (format #f "return ~a;\n" (car arguments))))
            ((eqv? type ':group)
             (append '("{\n") ;;; TODO/FIXME  it's easy to add a tab: do it!
                     (generate-function-lines (car arguments))
                     '("}\n\n"))))))
      result)))

(define (generate-function-lines pseudocodes)
  (fold (lambda (pseudo-instruction previous)
          (append previous (expand-pseudo-instruction pseudo-instruction)))
        '()
        pseudocodes))

(define (create-pseudocode specification)
  (let ((return-value (car specification))
        (name (list-ref specification 1))
        (args (list-ref specification 2)))
    `((:comment ,(format "// ~a\n" name)) ; TODO/FIXME even the comment could be better
      (:header ,return-value ,(format #f "~a_wrapper" name))
      (:group ,(if (eq? return-value 'void)
                   `((:sub-execute ,name)
                     (:return SCM_UNSPECIFIED))
                   `((:function-execute ,return-value ,name result)
                     (:to-py-object result scm_result)
                     (:return scm_result)))))))

(define (translate-specification raw-specification)
  (eval-string
   (string-append "'(" raw-specification ")")))

;;; TODO/FIXME refactor from here on. It's hideous
(write-lines header)

(map write-lines
 (map generate-function-lines
      (map (lambda (x)
             (format #f "CURRENT: ~a\n" x)
             x)
       (map create-pseudocode
            (map translate-specification
                 (read-specifications functions-file))))))
